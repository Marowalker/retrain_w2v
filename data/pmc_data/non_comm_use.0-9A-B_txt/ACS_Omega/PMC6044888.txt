
==== Front
ACS OmegaACS OmegaaoacsodfACS Omega2470-1343American Chemical Society 3002371510.1021/acsomega.7b00572ArticleFour-Analog Computation Based on DNA Strand Displacement Zou Chengye †Wei Xiaopeng *†Zhang Qiang *†Liu Chanjuan †Zhou Changjun ‡Liu Yuan †† Faculty of Electronic
Information and Electrical Engineering, Dalian University of Technology, Dalian 116024, China‡ Key Laboratory of Advanced and Intelligent Computing, Dalian University, Ministry of Education, Dalian 116622, China* E-mail: xpwei@dlu.edu.cn (X.W.).* E-mail: zhangq@dlu.edu.cn (Q.Z.).02 08 2017 31 08 2017 2 8 4143 4160 08 05 2017 05 07 2017 Copyright © 2017 American Chemical Society2017American Chemical SocietyThis is an open access article published under an ACS AuthorChoice License, which permits copying and redistribution of the article or any adaptations for non-commercial purposes.

DNA strand
displacement plays an important role in biological computations. The
inherent advantages of parallelism, high storability, and cascading
have resulted in increased functional circuit realization of DNA strand
displacement on the nanoscale. Herein, we propose an analog computation
with minus based on DNA strand displacement. The addition, subtraction,
multiplication, and division gates as elementary gates could realize
analog computation with minus. The advantages of this proposal are the analog computation with negative value and division computation. In this article, we provide the designs and principles
of these elementary gates and demonstrate gate performance by simulation.
Furthermore, to show the cascade property of gates, we computed a
polynomial as an example by these gates.

document-id-old-9ao7b00572document-id-new-14ao-2017-00572zccc-price
==== Body
1 Introduction
The advancement of science and technology
has necessitated higher requirements for computing speed and size of computer; however, these requirements may be limited by budget speed and computer size that are at maximal capacity. Therefore,
new computer types are urgently needed to break through the bottleneck.
Biological computers may satisfy the need in the future due to their
parallelism and high storability. At present, biological calculation
and DNA computation have attracted research interest, and increasing
DNA circuits are being designed for both digital and analog computations.1−16

The branch migration progress
of DNA strand displacement is suitable for the production of digital
signal, and many digital DNA circuits are built by DNA strand displacement,
even appearing large scale integrated DNA digital circuit.17,18

Compared with analog circuits, digital circuits can easily
reduce the deviation; however, analog circuits have certain advantages.
First, analog computation circuits consume less resource than digital
computation circuits,1,2,5−7 for example the add computation of 31 + 7 for digital DNA circuit consumes 8 DNA strands to represent inputs, while an analog DNA circuit consumes only 2 DNA strands to
represent inputs, thus it may have significance for experimental applications.
Second, analog DNA circuits can dynamically reflect the concentration
of the DNA strand, which is a function of the performance of the DNA
circuit and the mutual relationships between multiple analog gates,
which will be applied for analog control,19−21 for example DNA doctor22 and molecular robots.23 Third,
there are binary bits in the DNA digital circuit, whose values are decided by a threshold; analog circuit is without threshold and analog circuit is more robust than digital circuit in some applications.

Song et al. have researched analog computation
by DNA and strand displacement circuits, and they proposed three elementary
arithmetic operations: addition, subtraction, and multiplication.5 Analog circuits are suitable for positive analog
computation because the concentration of DNA strands is the value
of the input and the output. The concentration of DNA strands can
only be positive; thus, in their article, they have implemented only
positive analog computation. The subtraction gate in particular permits
the use of larger numbers and allows smaller values to be removed.
In addition, their element gates are
without the division gate; as a result, they utilize Newton iteration
to realize the division computation, but the error is large. In this
article, we proposed four new elementary arithmetic operations based
on their three element gates, addition, subtraction, multiplication,
and division, which can carry out analog computation with negative
and positive values through a dual-rail system and compared the properties
of our DNA analog circle with their design. The chemical reaction
networks (CRNs) of the four element gates are originated from ref (5). We have simplified the
CRNs of their three element gates and reduce reversible reactions.

2 Results
2.1 Abstractions of the Gates
Every gate has four inputs and two outputs, the high corner marks + and to distinguish – here indicate positive and negative values.
For example, when input values a1 and a2 are positive numbers, a1+ and a2+ are nonzero
but a1– and a2– are zero; when input values a1 and a2 are negative
numbers, a1+ and a2+ are zero but a1– and a2– are nonzero; when output value Pa is
positive, Pa+ is nonzero but Pa– is zero;
and when output value Pa is negative, Pa+ is zero but Pa– is nonzero
(Figure 1).

Figure 1 Abstraction
of analog DNA gates: addition gate, subtraction gate, multiplication
gate, and division gate.

2.2 Addition Gate
CRNs 1a–1f5 of the addition gate can be described
as follows 1a   1b   1c   1d   1e   1f  Ia1+, Ia2+, Ia1–, and Ia2– are the
input chemical species to the addition gate, where their initial concentrations
[Ia1+]0, [Ia2+]0, [Ia1–]0, and [Ia2–]0 represent the four inputs Ia1+, Ia2+, Ia1–, and Ia2–, respectively.
Therefore, a1+ = [Ia1+]0, a2+ = [Ia2+]0, a1– = [Ia1–]0, and a2– = [Ia2–]0, where a1+, a2+, a1–, and a2– ∈ (0, ra) and
Gai (i = 1, 2) and Ca3 are the chemical species; we define the initial concentrations
as [Gai]0 ≥ 2ra and [Ca3]0 ≥
2ra. Ma1 and Sp2 are the output chemical species of this gate, and their concentrations
at equilibrium, [Ma1]∞ and [Sp2]∞, represent Pa+ and Pa–, respectively.
When Ia1+, Ia2+, Ia1–, and Ia2– are reacted
eventually, addition gate computers can be described as follows 2  The output of the
addition gate can be described as follows 3  When [Ia1+]0 + [Ia2+]0 > [Ia1–]0 + [Ia2–]0, [Ma1]∞ is nonzero and [Sp2]∞ is zero; otherwise, [Ma1]∞ is zero
and [Sp2]∞ is nonzero. There are no constraints
on rate constants; ki (i = 1, ..., 6). The DNA reactions in the addition
gate are shown in Figures 2 and 3.

Figure 2 Diagram of DNA reactions in the addition gate. The length
of branch migration domains represented by gray domains is 20 nucleotides,
the length of toeholds represented by colored domains is 5 nucleotides,
and the arrow in a DNA strand indicates the 3′ to 5′
direction. The optimum temperature for the reactions is set at 25
°C.17,18 The forward and backward reaction rates
are
2 × 10–3/nM/s.

Figure 3 List of the DNA reactions
in the addition gate; CRN 4
is adapted from ref (5).

2.3 Subtraction Gate
The subtraction gate is
inspired by CRNs 5a–5f5 5a   5b   5c   5d   5e   5f  where Is1+,
Is2+, Is1–, and Is2– are the
inputs of the subtraction gate; when they are reacted eventually,
subtraction gate computers can be described as follows 6  The output of the
addition gate can be described as follows 7  When [Is1+]0 + [Is2–]0 > [Is1–]0 + [Is2+]0, [Ma1]∞ is nonzero and [Sp2]∞ is zero; otherwise, [Ma1]∞ is zero and [Sp2]∞ is
nonzero. There are no constraints on rate constants, ki (i = 1, ..., 6). The
DNA reactions in the subtraction gate are similar to those in the
addition gate; therefore, we exclude the diagram and the list of DNA
reactions in the subtraction gate.

2.4 Multiplication Gate
Considering the symbols
+ and −, multiplication computation is classified as follows 8  According to eq 8, we
should split four inputs into eight inputs, as shown in Figure 4.

Figure 4 Splitting of four inputs
in the multiplication gate.

CRNs 9a–9d, 10a–10h,511a–11h,5 and 12a,12b of the multiplication gate are given by 9a   9b   9c   9d   10a   10b   10c   10d   10e   10f   10g   10h   11a   11b   11c   11d   11e   11f   11g   11h   12a   12b  where Im1+, Im1–, Im2+, and Im2– are the input chemical species to the
gate; At and Bt are the output chemical species to the gate; and Gd1, Gd2, Ht1, Ht2, G1, G2, I1, and I2 are the breakup
products of the input chemical species. [Im1+]0, [Im1–]0, [Im2+]0,
and [Im2–]0 are the initial concentrations of the input chemical
species, so that, [Im1+]0 = m1+, [Im1–]0 = m1–, [Im2+]0 = m2+, and [Im2–]0 = m2–. Sy1, Sy2, Nd1, Nd2, Sx1, Sx2, Nt1, Nt2, amplifier1, amplifier2, splitter1, splitter2, splitter3, and splitter4 are the composed chemical species of the multiplication gate,
and (0, rm) is the input range; this implies
that m1+, m1–, m2+, m2– ∈
(0, rm), and initial concentrations of
the other composed chemical species Sy1, Sy2, Nd1, Nd2, Sx1, Sx2,
Nt1, Nt2, splitter1, splitter2, splitter3, splitter4, amplifier1, and amplifier2 are set to rm, where rm = 10N (N = 0, 1, 2, 3, ...).

When Im1+, Im2+, Im1–, and Im2– are reacted
at equilibrium, [At]∞ and [Bt]∞ represent Pm+ and Pm–, respectively. All other chemical species
are intermediate products.

According to eq 8, eqs 8a and 8b cannot be satisfied simultaneously.
When the inputs are Im1+ and Im2+ or Im1– and Im2–, the products of splitter are Gd1, G1, Ht2, and I1 or Gd2, G2, Ht1, and I2, respectively, which can produce Idn6. This means that [At]∞ is nonzero, but [Bt]∞ is zero; otherwise, [At]∞ is zero,
but [Bt]∞ is nonzero.

The reaction rate constant
must meet the following requirements 13  Therefore, reactions 10a, 10c, 10e, 10g, 11a, 11c, 11e, 11e, and 11g must be completed before reactions 9a and 9b can start.
Because reactions 10a and 10c are completed before reaction 9a, the concentration ratio
of Gy1 and Nd1 satisfied 14  Because k6 = k7, Gd1 will be consumed
by Gy1 and Nd1 at the same time and the concentration
of Idn6 at equilibrium is 15  Then, to take advantage of amplification reaction 38, the concentration
of At at equilibrium will be 16  Similarly, we have 17  The diagrams of
the DNA reactions of the splitter and amplifier are shown in Figure 5 and Figure 6, respectively. Figure 6 shows the reaction diagrams
of the two-fold amplifier; we can increase the length of DNA strands
of Pm1, Pm2, Qm1, Qm2,
Qd1, and Qd2 to achieve multiple amplification.
The DNA reactions in the multiplication gate are shown in Figure 7.

Figure 5 (a) Diagram of DNA reactions
in splitter1 and
splitter2. CRNs of splitter1 and splitter2 are adapted from ref (4). (b) Diagram of DNA reactions in splitter3 and
splitter4. CRNs of splitter3 and splitter4 are adapted from ref (4).

Figure 6 Diagram of
DNA reactions in the 2×
amplifier. CRNs of the amplifier are adapted from ref (4).

Figure 7 List of the DNA reactions
in the multiplication
gate; CRNs 19 and 20 are adapted from ref (5).

2.5 Division Gate
2.5.1 Basic Division Gate
For the division computation with minus, division computations are
classified as follows 20  where |d2| ≥ |d1|,
|d2| ≥ 1.

According to eq 20, we should split four
inputs into eight inputs, as shown in Figure 8.

Figure 8 Splitting
of four inputs in the division gate.

The following CRNs, 21a–21d, 22a–22j,523a–23j,5 and 24a–24d, are given for the division gate 21a   21b   21c   21d   22a   22b   22c   22d   22e   22f   22g   22h   22i   22j   23a   23b   23c   23d   23e   23f   23g   23h   23i   23j   24a   24b   24c   24d  where Id1+,
Id1–,
Id1+, and Id2– are the
input chemical species to the gate; I2d2 and
M2t2 are the output chemical species to the
gate; and Id1, Ih2, Id2, Ih1, Xb2, Xm2, Md2, and Bm2 are the breakup products of the input chemical species. [Id1+]0,
[Id1–]0, [Id2+]0, and [Id2–]0 are the initial concentrations
of the input chemical species, so that, [Id1+]0 = d1+, [Id1–]0 = d1–, [Id2+]0 = d2+, and [Id2–]0 = d2–,
where ID1, ID2, Gi1, Gi2, IH1, IH2, Hm1, Hm2,
IM1, IM2, IM3, IM4, I2d2, M2t2, split1, split2, split3, and split4 are
composed of the chemical species of the division gate, (0, rm) is the input range, meaning that d1+, d1–, d2+, d2– ∈ (0, rm), and initial concentrations of the other composed chemical
species are defined as [ID1]0 = [ID2]0 = [Gi1]0 =[ Gi2]0 = [IH1]0 = [IH2]0 = [Hm1]0 = [Hm2]0 =
[An]0 = [Bn]0 = rm, [IM1]0 = [IM3]0 = [IM4]0 = [I2d2]0 =
[M2t2]0 = 1.

When Id1+, Id2+, Id1–, and Id2– are reacted
at equilibrium, [I2d2]∞ and
[M2t2]∞ represent Pd+ and Pd–, respectively. All other chemical species are intermediate
products.

According to eq 20, eqs 20a and 20b cannot be satisfied simultaneously.
When the inputs are Id1+ and Id2+, the products of the splitter are Id1, Ih2, Xb2, and Xm2 and the concentration of M2t1 at equilibrium will be [M2t1]∞ = 1 corresponding to reaction 23e, where the reaction rate constant must
meet the following requirements 25  Therefore, reactions 21a, 21c, 22a, 22b, and 22c must be completed before reactions 22d and 22e can start.
Because reactions 22b and 22c are completed before reactions 22d and 22e, the concentration of Xb2 approaches [Id2+]0 –
[Id1+]0 and then the concentration ratio of Ng1 and Xb2 is satisfied 26  Owing to the
rate of reactions 22d and 22e being identical, IM1 will
be consumed by Ng1 and Xb2 at the same time
and the concentration of I2d1 at equilibrium
is 27  Next, to take advantage of amplification reactions 24a–24d, the concentrations
of I2d2 and M2t2 at equilibrium
will be 28  Similarly, we have 29  The DNA reactions in the basic division
gate are shown in Figure 9.

Figure 9 List of the DNA reactions
in the basic division gate;
CRNs 30–32 are adapted from refs (4, 5).

2.5.2 Improved
Division Gate
In consideration of the limitations (|d2| ≥ |d1|,
|d2| ≥ 1), we have taken the following
actions to improve the analog computation of division1. To satisfy 10N|d2| ≥
|d1| and 10N|d2| ≥ 1 (N =
0, 1, 2, 3, ...), we use a 10N-times amplifier
to amplify the concentration of the input of Id2+ or Id2–; when N = 0,
the improved division gate will be reduced to the basic division gate.

2. Amplified Id2+ or Id2– is involved
in the reactions of the splitter and basic division gate; thus, the
concentration of I2d1 at equilibrium is 33  Then, the concentration
of I2d2 at equilibrium will be 34  Similarly, we have 35  

3. Finally,
we use a 10N-times amplifier to amplify
the output of the basic division gate.



Therefore, we can extend the division analog computation to a real
number range through the above actions.

3 Leak Reactions
Figure 10 depicts the main
leak reactions in the four analog computation gates. The reason of
the main leak is that the base pairs in the circular portion of DNA
strand can be temporarily broken and create a toehold for an invaded
strand. For example, Ma2 can invade Sx1 and
displace the q1 domain in the addition and subtraction
gates, which is a typical reaction existing in the multiplication
and division gates without splitter and amplifier.

Figure 10 Main leak reactions
according to ref (5) in the four analog computation gates: leak reactions 1a and 2 in the addition
and subtraction gates; leak reactions 3–10a in the multiplication gate; and leak reactions 11a–14 in the basic division gate. The forward and backward
leak reaction rates are 5 × 10–9/nM/s.

We have analyzed
the leak reactions of the four gates to evaluate the
affection of the leak reactions for the output of the gates as follows:(a) Affection of leak
reactions in addition gates:(I) When the symbols of a1 and a2 are different, leak reaction 1a in the addition gate is absent. The reaction
rate of leak reaction 2 (reaction 37) is reduced
compared to that of reaction 1f; therefore, affection of leak reaction 2 can be ignored.

(II) When the symbols of a1 and a2 are the same, leak reaction 1a (reaction 38) will delay the concentration of the output reaching to valid range. 36   37  



(b) Effect of leak reactions in subtraction
gates:(I) When
the symbols of s1 and s2 are the same, the affection of leak reaction can be
ignored.

(II) When the
symbols of s1 and s2 are different, leak reaction 1a will delay the concentration of the output strand
at equilibrium without affecting the value of output.



(c) Effect of leak
reactions in multiplication gates:

Although the production of
leak reactions 3, 5a, 7, and 9a will increase the value of output, we can neglect the affection
of leak reactions in multiplication gates because these leak reactions
have much less reaction rates compared to those of reactions 10b, 10f, 11b, and 11f.

(d) Effect of leak reactions
in division gates:



In view of surplus
of Xb2, Md2, Xm2, and Bm2 in reactions 22c and 22e; reactions 22h and 22j; reactions 23c and 23e; reactions 23h and 23j, respectively, the production of leak reactions 11a–14 will increase the concentrations of [I2d1] and [M2t1] slowly, which will
reduce the value of output gradually.

Above all, we use a valid
range to show the performance of a gate under particular inputs; thus, pa – r ≤ output
value ≤ pa + r, ps – r ≤
output value ≤ ps + r, pm – r ≤
output value ≤ pm + r, and pd – r ≤
output value ≤ pd + r are fixed to define the valid output range of the addition gate,
subtraction gate, multiplication gate, and division gate, respectively,
where 0.02 ≤ r ≤ 0.04 nM.

4 Simulation Result of the Gates
To test the effectiveness of these four gates, we simulated three
input ranges (0, 1), (0, 2), and (0, 4), where the ranges between
the pink and green lines were the valid output ranges. The simulation
performance for the addition gate is given in Figure 11. When the symbols of a1 and a2 are different, the
output stays in the valid range for a longer time because the inputs
are larger and the effect of leak is relatively smaller. When the
symbols of a1 and a2 are the same, the period for outputs in the valid range is
constant. Figure 12 shows the performance of the simulation for the subtraction gate.
When the symbols of s1 and s2 are the same, the output stays in the valid range for
a longer time because the inputs are larger and the effect of leak
is relatively smaller. When the symbols of s1 and s2 are different, the period
for outputs to stay in the valid range is constant. The simulation
performance for the multiplication gate is shown by Figure 13; because the period for outputs
to stay in the valid range is constant, the influence of leak for
multiplication gates can be ignored. Figure 14 shows the simulation performance for the
division gate; the period for output to stay in the valid range increases
with increasing concentrations of inputs because the influence of
leak decreases with increasing inputs.

Figure 11 Performance
of the addition
gate.

Figure 12 Performance
of the subtraction gate.

Figure 13 Performance of the multiplication gate.

Figure 14 Performance
of the basic
division gate.

5 Analog DNA Circuit To Compute 
5.1 Principle of the
Analog Circuit
The input and output strands have same properties,
so our four analog gates are modular; therefore, we can build DNA
circuits by the four analog gates. For the addition and subtraction
gates, early arrivals will wait for latecomers. When the cancellation
between Sp1 and Sp2 is finished, the remaining
Sp1 or Sp2 will be the output strands. For the
multiplication gate, the concentration ratios
of Gy1 and Nd1, Gy2 and Nd2, Gx1 and Nt1, and Gx2 and Nt2 are obtained as early as possible because the ratios of reactions
18 and 19 are much smaller than those of the other reactions. Furthermore,
Im1+ and Im1– or Im2+ and Im2– can be
freely chosen for preparation in a “dynamic” fashion
by other gates. For the division gate, inputs IM1, IM2, IM3, and IM4 can be prepared in a
“static” fashion and ratios of reactions with IM1, IM2, IM3, and IM4 are much
smaller than those of other reactions, such that they can wait for
others. It should be noted that the division gate should be installed
at the end of the DNA circuit because I2d2 and
M2t2 are statically prepared in advance and
they will react with other DNA strands of below gates.

Figure 15 shows an analog
DNA circuit to compute , for x ∈ R, |y| ≥
1.

Figure 15 Circuit
to compute .

5.2 Simulation of
the Circuit to Compute g(x, y)
In the simulation of g(x, y), x ∈ {−2,
−1.75, −1.5, −1.25, −1, −0.75,
−0.5, −0.25, 0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75,
2} and y ∈ {1, 1.5, 2, 2.5, 3, 4, 5}. To quantify
the performance of the circuit, we fixed the valid range between 0.95g(x, y) and 1.05g(x, y) during the 106 s. Figure 16a gives an example of the computation of g(x, y), where x = 1 and y = −2. The figure of evolution of g(x, y) is similar to division gate, but the outputs of g(x, y) reach the valid range slower than division
gate ([Id1+]0 = 1, [Id1–]0 = [Id2+]0 = 0, [Id2–]0 = 2), which
is the result of operations of add and multiplication gates. In simulation,
when y ∈ {1, 1.5, 2, 2.5, 3}, the
outputs stay in the valid range for a longer time, as shown in Figure 16b, which is irrelevant
to the value of outputs because the affection of leak reaction is
reduced with enlargement of inputs. Consequently, time for outputs
to stay in the valid range has positive and negative symmetries, which
means that time for outputs to stay in the valid range is the same
for identical absolute values of inputs. When y∈ {4, 5}, the outputs cannot stay in the valid range, meaning
that the enlargement of error for outputs, rather than decrease of
time for outputs, stays in the valid range.

Figure 16 (a) Evolution
of DNA
circuit to compute g(x, y) when x = 1 and y =
−2. (b) Performance of the DNA circuit to compute g(x, y).

6 Comparison and Analysis
In
this article, we not only added the division gate but also realized
analog computation by DNA strand displacement circuits with minus;
furthermore, we made some improvements in DNA analog computation.

6.1 Reduce the Influence of Leak
Reactions of the Amplifier
As Figure 18 shows, Om is a production of main leak
reactions in the amplifier designed by Song et al. and will increase
the output of the multiplication gate. The larger [A1]0 is more influential to the output, as shown in Figure 17, when [Im1]0 = 1.5 and [Im2]0 = 2.

Figure 17 Evolution of the output
with the concentration
of DNA strand [A1]0, when [Im1]0 =
1.5 and [Im2]0 = 2.

The leaks
shown in Figure 18 were not evident in our amplifier, indicating
that our multiplication gate was more stable and easier to operate.

Figure 18 Main leak reactions
in the amplifier designed
by Song et al.5

6.2 Accuracy of Analog
Division Computation
Although there was no division gate
in the DNA analog computation gates designed by Song et al., they
achieved division computation  by Newton iteration 38  where .

Execution of the circuit to compute g(x, y) = 2y – y2x is shown in Figure 19, when x =
0.5 and y = 1.

Figure 19 Execution of the circuit
to compute g(x, y).

Considering that 101x > 1 in the computation of r(x), we can use the improved division gate to compute r(x). The performance of the improved division
gate is shown in Figure 20a, when [Id1+]0 = 1 and [Id2+]0 = 0.5. Then, we chose a 10×
amplifier to amplify the output of the improved division gate when
the output of the improved division gate reached a valid range; otherwise,
I2d2 and M2t2 will be
amplified first because I2d2 and M2t2 are statically prepared in advance. The process of
amplification is shown in Figure 20b, where [I2d2]∞ = 0.1977 and I2d3 is the output of the 10×
amplifier.

Figure 20 (a) Performance of the
improved division gate. (b) Output of the basic division gate is amplified
by the 10× amplifier.

On the basis of these principles, the results of
our strategy were more accurate than those of the technique by Song
et al.

7 Conclusions
We proposed four DNA analog computation gates and extended the
computation range to real numbers. On the basis of the same properties
of these gates, we constructed a DNA circuit to compute the polynomial
function of inputs. Simulations showed that the time for
outputs of circuit to reach a valid range was similar to that for
a single basic division gate because DNA reactions are simultaneous;
therefore, the computations in the DNA circuit are parallel, which
we aimed to achieve in this study.

Leak reaction is a common
issue in a DNA strand displacement circuit,24 which was reduced in our work. In our amplifier and splitter, we
eliminated the main leak reactions, similar to that of the main leak
reactions in the amplifier designed by Song et al., which improved
the computation of multiplication.

8 Methods
The performances of the four element
gates, the improved division gate, and the computation of a polynomial
are simulated by Language for Biochemical Systems (LBS). To speed
up the simulation, we used MATLAB to run the code produced from LBS
by Visual GEC. All DNA figures are drawn by Visual DSD. The unit of
the values of the code in the supporting information is nM.

Author Contributions
The study was carried out and the manuscript was written with contributions
of all authors. All authors have approved the final version of the
manuscript.

The authors declare no competing
financial interest.

Acknowledgments
This work is supported by the
National Natural Science Foundation of China (Nos. 61425002, 61672121,
61572093, 61402066, 61402067, 61370005, and 31370778), the Program
for Changjiang Scholars and Innovative Research Team in University
(No. IRT_15R07), the Program for Liaoning Innovative Research Team
in University (No. LT2015002), the Basic Research Program of the Key
Lab in Liaoning Province Educational Department (Nos. LZ2014049 and
LZ2015004), the Scientific Research Fund of Liaoning Provincial Education
(Nos. L2015015 and L2014499), and the Program for Liaoning Key Lab
of Intelligent Information Processing and Network Technology in University.
==== Refs
References
Li W. ; Zhang F. ; Yan H. ; Liu Y. 
DNA based
arithmetic function: a half adder based on DNA strand displacement . Nanoscale 
2016 , 8 , 3775 –3784 . 10.1039/c5nr08497k .26814628 
Sun J. W. ; Li X. ; Cui G. Z. ; Wang Y. F. 
One-Bit Half Adder-Half Subtractor Logical Operation
Based on the DNA Strand Displacement . J. Nanoelectron.
Optoelectron. 
2017 , 12 , 375 –380 . 10.1166/jno.2017.2027 .
Fern J. ; Scalise D. ; Cangialosi A. ; Howie D. ; Potters L. ; Schulman R. 
DNA Strand-Displacement Timer Circuits . ACS Synth. Biol. 
2017 , 6 , 190 –193 . 10.1021/acssynbio.6b00170 .27744682 
Lakin M. R. ; Stefanovic D. 
Supervised
Learning in Adaptive DNA Strand Displacement Networks . ACS Synth. Biol. 
2016 , 5 , 885 –897 . 10.1021/acssynbio.6b00009 .27111037 
Song T. ; Garg S. ; Mokhtar R. ; Bui H. ; Reif J. 
Analog Computation by DNA Strand Displacement Circuits . ACS Synth. Biol. 
2016 , 5 , 898 –912 . 10.1021/acssynbio.6b00144 .27363950 
Li M. H. ; Liu F. F. ; Song M.   In A Half-Subtracter
Calculation Model Based on Stand Displacement Technology ,
10th International Conference on Bio-Inspired Computing - Theories
and Applications, Hefei, China, Sept 25–28, 2015 .
Sun J. W. ; Li X. ; Huang C. ; Cui G. Z. ; Wang Y. F.  Two-Digit Full
Subtractor Logical Operation Based on DNA Strand Displacement . In Bio-Inspired Computing-Theories and Applications . Pan L. Q. , Păun G. , Pérez-Jiménez M. J. , Song T.  , Eds.; Academic Press , 2016 ; pp 21 –29 .
Chen X. X. ; Dong Y. F. ; Xiao S. Y. ; Liang H. J. 
DNA and DNA computation
based on toehold-mediated strand-displacement reactions . Acta Phys. Sin. 
2016 , 65 , 17810610.7498/aps.65.178106 .
Zhang Z. ; Fan T. W. ; Hsing I. M. 
Integrating DNA strand displacement
circuitry to the nonlinear hybridization chain reaction . Nanoscale 
2017 , 9 , 2748 –2754 . 10.1039/C6NR06589A .28155931 
Cui G. ; Zhang J. ; Cui Y. ; Zhao T. ; Wang Y. 
DNA Strand-Displacement Digital Logic
Circuit with Fluorescence Resonance Energy Transfer Detection . J. Comput. Theor. Nanosci. 
2015 , 12 , 2095 –2100 . 10.1166/jctn.2015.3993 .
Deng W. ; Xu H. G. ; Ding W. ; Liang H. J. 
DNA Logic Gate Based on Metallo-Toehold Strand Displacement . PLoS One 
2014 , 9 , e11165010.1371/journal.pone.0111650 .25365381 
Dou B. ; Yang J. ; Shi K. ; Yuan R. ; Xiang Y. 
DNA-mediated strand displacement
facilitates sensitive electronic detection of antibodies in human
serums . Biosens. Bioelectron. 
2016 , 83 , 156 –161 . 10.1016/j.bios.2016.04.044 .27111124 
Giuffrida M. C. ; Zanoli L. M. ; D’Agata D. ; Finotti A. ; Gambari R. ; Spoto G. 
Isothermal circular-strand-displacement polymerization of DNA and
microRNA in digital microfluidic devices . Anal.
Bioanal. Chem. 
2015 , 407 , 1533 –1543 . 10.1007/s00216-014-8405-4 .25579461 
Rogers W. B. ; Manoharan V. N. 
Programming
colloidal phase transitions with DNA strand displacement . Science 
2015 , 347 , 639 –642 . 10.1126/science.1259762 .25657244 
Song M. ; Wang Y. C. ; Li M. H. ; Dong Y. F. 
Metal-Mediated Logic Computing Model with DNA Strand
Displacement . J. Comput. Theor. Nanosci. 
2015 , 12 , 2318 –2321 . 10.1166/jctn.2015.4027 .
Zhang X. C. ; Zhang W. W. ; Zhao T. T. ; Wang Y. F. ; Cui G. Z. 
Design
of Logic Circuits Based on Combinatorial Displacement of DNA Strands . J. Comput. Theor. Nanosci. 
2015 , 12 , 1161 –1164 . 10.1166/jctn.2015.3867 .
Yordanov B. ; Kim J. ; Petersen R. T. ; Shudy A. ; Kulkarni V. V. ; Phillips A. 
Computational Design
of Nucleic Acid Feedback Control Circuits . ACS
Synth. Biol. 
2014 , 3 , 600 –616 . 10.1021/sb400169s .25061797 
Qian L. ; Winfree E. 
Scaling Up Digital Circuit Computation with DNA Strand
Displacement Cascades . Science 
2011 , 332 , 1196 –1201 . 10.1126/science.1200520 .21636773 
Qian L. ; Winfree E. ; Bruck J. 
Neural network computation with DNA
strand displacement cascades . Nature 
2011 , 475 , 368 –372 . 10.1038/nature10262 .21776082 
Oishi K. ; Klavins E. 
Biomolecular implementation of linear I/O systems . IET Syst. Biol. 
2011 , 5 , 252 –260 . 10.1049/iet-syb.2010.0056 .21823756 
Sawlekar R. ; Montefusco F. ; Kulkarni V. V. ; Bates D. G. 
Implementing Nonlinear Feedback Controllers
Using DNA Strand Displacement Reactions . IEEE
Trans. Nanobiosci. 
2016 , 15 , 443 –454 . 10.1109/TNB.2016.2560764 .
Benenson Y. ; Gil B. ; Ben-Dor U. ; Adar R. ; Shapiro E. 
An autonomous molecular computer
for logical control of gene expression . Nature 
2004 , 429 , 423 –429 . 10.1038/nature02551 .15116117 
Sarpeshkar R. 
Analog versus
digital: Extrapolating from electronics to neurobiology . Neural Comput. 
1998 , 10 , 1601 –1638 . 10.1162/089976698300017052 .9744889 
Thachuk C. ; Winfree E. ; Soloveichik D.  Leakless DNA Strand Displacement Systems. DNA Computing
and Molecular Programming , Proceedings of the 21st International
Conference, DNA 21, 2015 ; pp 133 –153 .

